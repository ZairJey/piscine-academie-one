package main

import (
	"bufio"
	"fmt"
	"os"
)

func main() {
	// Объявление слайса для хранения вводимых символов.
	var arr []rune

	// Инициализация ридера для чтения ввода с стандартного ввода (os.Stdin).
	reader := bufio.NewReader(os.Stdin)
	// Чтение символов ввода по одному до возникновения ошибки (обычно EOF или конец ввода).
	for {
		char, _, err := reader.ReadRune()
		if err != nil {
			break
		}
		// Добавление считанного символа в слайс.
		arr = append(arr, char)
	}
	// Преобразование слайса символов в строку.
	str := string(arr)

	// Инициализация переменных x и y для хранения размеров ввода.
	x := 0
	y := 0
	// Вычисление размеров (x = ширина, y = высота) ввода.
	for _, char := range arr {
		if char != '\n' && y == 0 {
			x++
		}
		if char == '\n' {
			y++
		}
	}
	// Если размеры неверны, вывод "Not a quad function" и выход.
	if x == 0 || y == 0 {
		fmt.Println("Not a quad function")
		return
	}

	// Проверка, соответствует ли ввод какой-либо из квадратичных функций, и вывод результата.
	if isEqual(str, x, y, 'o', 'o', 'o', 'o', '-', '|') {
		fmt.Printf("[quadA] [%v] [%v]\n", x, y)
		return
	}

	if isEqual(str, x, y, '/', '\\', '\\', '/', '*', '*') {
		fmt.Printf("[quadB] [%v] [%v]\n", x, y)
		return
	}

	n := 0
	if isEqual(str, x, y, 'A', 'A', 'C', 'C', 'B', 'B') {
		n++
		fmt.Printf("[quadC] [%v] [%v]", x, y)
	}
	if isEqual(str, x, y, 'A', 'C', 'A', 'C', 'B', 'B') {
		if n > 0 {
			fmt.Print(" || ")
		}
		n++
		fmt.Printf("[quadD] [%v] [%v]", x, y)
	}
	if isEqual(str, x, y, 'A', 'C', 'C', 'A', 'B', 'B') {
		if n > 0 {
			fmt.Print(" || ")
		}
		n++
		fmt.Printf("[quadE] [%v] [%v]", x, y)
	}

	if n > 0 {
		fmt.Println()
		return
	}

	// Если ни одна из квадратичных функций не соответствует, вывод "Not a quad function".
	fmt.Println("Not a quad function")
}

// isEqual - вспомогательная функция, проверяющая, соответствует ли ввод квадратичной функции, заданной указанными параметрами.
// x и y - размеры ввода. c1, c2, c3 и c4 - угловые символы.
// hor - горизонтальный символ, а ver - вертикальный символ.
func isEqual(str string, x, y int, c1, c2, c3, c4, hor, ver rune) bool {
	// Объявление слайса для хранения ожидаемых символов квадратичной функции.
	var arrE []rune

	// Перебор каждой строки ожидаемой квадратичной функции.
	for i := 0; i < y; i++ {
		// Перебор каждого столбца ожидаемой квадратичной функции.
		for j := 0; j < x; j++ {
			// Если текущая позиция находится на первой строке.
			if i == 0 {
				// Если это первый столбец, добавить первый угловой символ (c1).
				if j == 0 {
					arrE = append(arrE, c1)
					// Если это последний столбец, добавить второй угловой символ (c2).
				} else if j == x-1 {
					arrE = append(arrE, c2)
					// Если это любой другой столбец, добавить горизонтальный символ (hor).
				} else {
					arrE = append(arrE, hor)
				}
				// Если текущая позиция находится на последней строке.
			} else if i == y-1 {
				// Если это первый столбец, добавить третий угловой символ (c3).
				if j == 0 {
					arrE = append(arrE, c3)
					// Если это последний столбец, добавить четвертый угловой символ (c4).
				} else if j == x-1 {
					arrE = append(arrE, c4)
					// Если это любой другой столбец, добавить горизонтальный символ (hor).
				} else {
					arrE = append(arrE, hor)
				}
				// Если текущая позиция находится на любой другой строке.
			} else {
				// Если это первый или последний столбец, добавить вертикальный символ (ver).
				if j == 0 || j == x-1 {
					arrE = append(arrE, ver)
					// Если это любая другая позиция, добавить символ пробела.
				} else {
					arrE = append(arrE, ' ')
				}
			}
		}
		// После обработки каждой строки добавить символ новой строки.
		arrE = append(arrE, '\n')
	}
	// Преобразовать слайс ожидаемых символов в строку.
	strE := string(arrE)
	// Вернуть true, если ожидаемая строка (strE) соответствует входной строке (str); в противном случае вернуть false.
	return strE == str
}
